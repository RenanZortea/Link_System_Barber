{"version":3,"file":"index.js","sources":["../src/hooks/useSmoothHorizontalScroll/index.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport type { RefObject } from \"react\";\n\ninterface UseSmoothHorizontalScroll {\n  scrollContainerRef: RefObject<HTMLElement>;\n  handleScroll: () => void;\n  scrollTo: (shift: number) => void;\n  isAtStart: boolean;\n  isAtEnd: boolean;\n}\n\n/**\n * It returns an object with a ref to the scroll container, a function to handle scroll events, a\n * function to scroll to a certain position, and booleans to indicate whether the scroll container is\n * at the start or end\n * @returns An object with the following properties:\n * - scrollContainerRef: A ref to the scroll container\n * - handleScroll: A function that updates the isAtStart and isAtEnd state\n * - scrollTo: A function that scrolls the container by a given amount\n * - isAtStart: A boolean indicating whether the container is scrolled to the start\n * - isAtEnd: A boolean indicating whether\n */\nconst useSmoothHorizontalScroll = (): UseSmoothHorizontalScroll => {\n  const scrollContainerRef = useRef<HTMLElement>(null);\n  const [isAtStart, setIsAtStart] = useState<boolean>(true);\n  const [isAtEnd, setIsAtEnd] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!scrollContainerRef.current) return;\n    setIsAtEnd(\n      scrollContainerRef.current.scrollWidth === scrollContainerRef.current.offsetWidth\n    );\n  }, [scrollContainerRef]);\n\n  const handleScroll = () => {\n    if (!scrollContainerRef.current) return;\n\n    setIsAtStart(scrollContainerRef.current?.scrollLeft === 0);\n    setIsAtEnd(\n      Math.floor(\n        scrollContainerRef.current?.scrollWidth -\n        scrollContainerRef.current?.scrollLeft\n      ) <= scrollContainerRef.current?.offsetWidth\n    );\n  };\n\n\n  const scrollTo = (shift: number) => {\n    scrollContainerRef.current?.scrollTo({\n      left: scrollContainerRef.current?.scrollLeft + shift,\n      behavior: \"smooth\",\n    });\n  };\n\n  return {\n    scrollContainerRef,\n    handleScroll,\n    scrollTo,\n    isAtStart,\n    isAtEnd\n  };\n};\n\nexport default useSmoothHorizontalScroll;\n"],"names":["useSmoothHorizontalScroll","scrollContainerRef","useRef","_a","useState","isAtStart","setIsAtStart","_b","isAtEnd","setIsAtEnd","useEffect","current","scrollWidth","offsetWidth","handleScroll","scrollLeft","Math","floor","scrollTo","shift","left","behavior"],"mappings":"6QAsBMA,0BAA4B,WAChC,IAAMC,EAAqBC,aAAoB,MACzCC,EAA4BC,gBAAkB,GAA7CC,OAAWC,OACZC,EAAwBH,gBAAkB,GAAzCI,OAASC,OAEhBC,gBAAU,WACHT,EAAmBU,SACxBF,EACER,EAAmBU,QAAQC,cAAgBX,EAAmBU,QAAQE,cAEvE,CAACZ,IAsBJ,MAAO,CACLA,qBACAa,aAtBmB,uBACdb,EAAmBU,UAExBL,EAAwD,eAA3CL,EAAmBU,8BAASI,aACzCN,EACEO,KAAKC,iBACHhB,EAAmBU,8BAASC,wBAC5BX,EAAmBU,8BAASI,yBACzBd,EAAmBU,8BAASE,gBAenCK,SAVe,SAACC,qBAChBlB,EAAmBU,wBAASO,SAAS,CACnCE,gBAAMnB,EAAmBU,8BAASI,YAAaI,EAC/CE,SAAU,YAQZhB,YACAG"}