{
  "version": 3,
  "sources": ["../../@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"localeText\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useThemeProps } from '@mui/material/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const MuiPickersAdapterContext = /*#__PURE__*/React.createContext(null);\nif (process.env.NODE_ENV !== 'production') {\n  MuiPickersAdapterContext.displayName = 'MuiPickersAdapterContext';\n}\n/**\n * Demos:\n *\n * - [Date format and localization](https://mui.com/x/react-date-pickers/adapters-locale/)\n * - [Calendar systems](https://mui.com/x/react-date-pickers/calendar-systems/)\n * - [Translated components](https://mui.com/x/react-date-pickers/localization/)\n * - [UTC and timezones](https://mui.com/x/react-date-pickers/timezone/)\n *\n * API:\n *\n * - [LocalizationProvider API](https://mui.com/x/api/date-pickers/localization-provider/)\n */\nexport const LocalizationProvider = function LocalizationProvider(inProps) {\n  const {\n      localeText: inLocaleText\n    } = inProps,\n    otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded);\n  const {\n    utils: parentUtils,\n    localeText: parentLocaleText\n  } = React.useContext(MuiPickersAdapterContext) ?? {\n    utils: undefined,\n    localeText: undefined\n  };\n  const props = useThemeProps({\n    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,\n    // We will then merge this theme value with our value manually\n    props: otherInProps,\n    name: 'MuiLocalizationProvider'\n  });\n  const {\n    children,\n    dateAdapter: DateAdapter,\n    dateFormats,\n    dateLibInstance,\n    adapterLocale,\n    localeText: themeLocaleText\n  } = props;\n  const localeText = React.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);\n  const utils = React.useMemo(() => {\n    if (!DateAdapter) {\n      if (parentUtils) {\n        return parentUtils;\n      }\n      return null;\n    }\n    const adapter = new DateAdapter({\n      locale: adapterLocale,\n      formats: dateFormats,\n      instance: dateLibInstance\n    });\n    if (!adapter.isMUIAdapter) {\n      throw new Error(['MUI X: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`', \"For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`\", 'More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation'].join(`\\n`));\n    }\n    return adapter;\n  }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);\n  const defaultDates = React.useMemo(() => {\n    if (!utils) {\n      return null;\n    }\n    return {\n      minDate: utils.date('1900-01-01T00:00:00.000'),\n      maxDate: utils.date('2099-12-31T00:00:00.000')\n    };\n  }, [utils]);\n  const contextValue = React.useMemo(() => {\n    return {\n      utils,\n      defaultDates,\n      localeText\n    };\n  }, [defaultDates, utils, localeText]);\n  return /*#__PURE__*/_jsx(MuiPickersAdapterContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nprocess.env.NODE_ENV !== \"production\" ? LocalizationProvider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Locale for the date library you are using\n   */\n  adapterLocale: PropTypes.any,\n  children: PropTypes.node,\n  /**\n   * Date library adapter class function.\n   * @see See the localization provider {@link https://mui.com/x/react-date-pickers/getting-started/#setup-your-date-library-adapter date adapter setup section} for more details.\n   */\n  dateAdapter: PropTypes.func,\n  /**\n   * Formats that are used for any child pickers\n   */\n  dateFormats: PropTypes.shape({\n    dayOfMonth: PropTypes.string,\n    dayOfMonthFull: PropTypes.string,\n    fullDate: PropTypes.string,\n    fullTime: PropTypes.string,\n    fullTime12h: PropTypes.string,\n    fullTime24h: PropTypes.string,\n    hours12h: PropTypes.string,\n    hours24h: PropTypes.string,\n    keyboardDate: PropTypes.string,\n    keyboardDateTime: PropTypes.string,\n    keyboardDateTime12h: PropTypes.string,\n    keyboardDateTime24h: PropTypes.string,\n    meridiem: PropTypes.string,\n    minutes: PropTypes.string,\n    month: PropTypes.string,\n    monthShort: PropTypes.string,\n    normalDate: PropTypes.string,\n    normalDateWithWeekday: PropTypes.string,\n    seconds: PropTypes.string,\n    shortDate: PropTypes.string,\n    weekday: PropTypes.string,\n    weekdayShort: PropTypes.string,\n    year: PropTypes.string\n  }),\n  /**\n   * Date library instance you are using, if it has some global overrides\n   * ```jsx\n   * dateLibInstance={momentTimeZone}\n   * ```\n   */\n  dateLibInstance: PropTypes.any,\n  /**\n   * Locale for components texts\n   */\n  localeText: PropTypes.object\n} : void 0;"],
  "mappings": "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",
  "names": ["LocalizationProvider", "_jsx", "PropTypes"]
}
